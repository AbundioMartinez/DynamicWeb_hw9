Abundio Martinez1. What is the Web Storage API? The Web Storage API permits applications to store data within an individual user's browser.2. What data storage was used before HTML5 was introduced? application data had to be stored in cookiesWhat was the data storage called and what was it included in? included in each server request. However, Web Storage is more secure, and large amounts of data can be stored locally, without affecting website performance.3. What are 3 advantages of using the Web Storage API over cookies?- Storage interface: permits you to set, retrieve, and remove data for a specific domain and storage type (local or session).- Window Interface: Web Storage API extends the global Window object with the Window.sessionStorage and Window.localStorage properties. These properties provide access to the current domain session and local Storage objects. A Window.onstorage event handler fires when a storage type changes: when a new item is set or the data itself changes. We will be implementing an event listener and event in the 7th project for this course which is part of the Week 9 homework focusing on the Web Storage API, and specifically localStorage and sessionStorage.- StorageEvent Interface: the storage event is fired on a document's Window object when a storage type or data changes.4. What are the two objects called for storing data on the client that HTML5 Web Storage provides?- Storage.length: the length property returns an integer representing the number of data items stored in the Storage object.- The Storage object can be represented by either the localStorage object or the sessionStorage object.5. Can localStorage and sessionStorage be read server-side? No6. Which data item can be read server-side? Cookies  Why is it popular? cookies are popular because they allow sites to store user data directly into the user's Web browser. They are mostly used to identify a user's session, allowing a web server to recognize the user as they navigate through the site, and may contain sensitive data. That means they have to be well secured and protected. What is it used mostly for? cookies are mostly for server-side reading. And what kind of data might it contain? cookies store data that has to be sent back to the server with requests.7. Why do cookies have to be well secured and protected? cookies can be made secure by setting the httpOnly flag as true for that cookie. This prevents client-side access to that cookie.8. What is the httpOnly flag good for? The httpOnly flag blocks access of a cookie from the client-side and therefore JavaScript code.  And what does it help mitigate the negative impact of, for example? That would mitigate the negative impact of the XSS attack.9. What are localStorage and sessionStorage of the Web Storage API connected to? And what does that connection make possible for pages from the same origin to do?localStorage and sessionStorage of the Web Storage API are connected to a particular origin, domain and protocol.This connection makes is possible for all pages from one origin to store and access the same data.10. What does the Storage Interface of the Web Storage API permit?permits you to set, retrieve and remove data for a specific domain and storage type.11. The Storage Object, represented by the localStorage and sessionStorage objects, contains one property. What is that property called and what does it return? Use your project application to describe what this property does.The Storage Object, represented by the localStorage and sessionStorage objects contains storage.length, the length property which returns an integer representing the number of data items stored in the Storage object.12. Give me the five Storage methods of the Web Storage API and describe what each does. When applicable, use code from your project application as examples.Storage.clear() : when invoked, will empty all keys out of storage    ex.  - Storage.removeItem() : when passed a key name will remove that key from the storage. If not iten is associated with the given  key than this method will do nothing    ex. - Storage.setItem() : when passed a key name and value will add that key to the storage/update that key's value if it already exists.           ex.  - Storage.getItem() : when passed a key name will return that key's value or null is the key is non-existent   ex.- Storage.key() : when passed a certain number represented by n, this method returns the name of the nth key in the storage.    ex.      13. When using cookies, why would you want to use the Secure flag? We using secure because we want to prevent client-side access to the cookies.The secure flag attribute allows you to forbid a cookie to be transmitted over HTTP. It will only be transmitted through HTTPS.14. What is the difference between localStorage and sessionStorage? The localstore can only be cleared using javaScript. - localStorage: - Maintains storage within: the Applications tab in Chrome Developer Tools, the Inspector tab and then the Storage tab within Firefox Web Developer Tools, and the Storage tab within the JavaScript Console in Safari, for example.- The data is available for the duration of a page session, as long as the browser window or tab is open. This includes page reloads and restores.- Stores data only for a session. The data is stored until the browser window or browser tab is closed.- The data is never transferred to the server.- The storage limit is larger than for a cookie, max 5MB.- sessionStorage:- data is never transferred to the server.- data is stored with no expiration date by default, and can only be cleared using JavaScript, clearing the Browser cache, or localStorage itself located in the Browser Console.-Storage limit is the maximum compared to sessionStorage and cookies (10MB).15. What are the similarities between localStorage and sessionStorage? The data is never transferred to the server.-Storage limits are larger than cookies- The two Web Storage objects both allow for the saving of key/value pairs in the browser- Data is never transferred to the server16. Explain what try...catch is and what it does.- try...catch statement marks a block of statements to try out code and specifics a response if an exception is thrown.The try...catch statement handles some or all of the errors that may occur in a block of code, while still running code.- The try statement allows you to define a block of code to be tested for errors while it is being executed.- The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.17. Why do we have to set a try...catch statement in our application? Refer to your/this homework README.md for the answer.- If there is a sessionStorage support, the program steps into the else statement. There we set and get our sessionStorage with checking if we have exceeded the sessionStorage quota. We have to set a try...catch statement in our application in order to catch our exception. We set and get our sessionStorage and also check if we have exceeded our sessionStorage quota.Because the exception needs to be catched. the try...catch statement must be used.18. Explain what JSON.stringify() does and provide an example using code from your project application.- JSON.stringify() method converts a JavaScript object or value to a JSON string. const csv = JSON.stringify(sessionStorage['autosave']); We need to take the sessionStorage object's autosave property's value and extract it from sessionStorage and transfer the value into a string so that we may insert it into a .txt file.19. Describe what the value of the csv variable is and why it is important for our application. This is important for our application in that way we can insert the value that is going to transferred into a string, into a .txt file for the user to downloadThe value of the csv variable is20. Please copy and paste the result of the console.log(csv) after you have clicked on the Save Text To File For Download button. Hint: you should try this out only after you have completed building your application.session.js:10 hello friends!